---
output:
  pdf_document: default
  html_document: default
---
# Introduction to the Tidyverse
  
![](imgs/tidyverse-model.png)  
  
Estas anotações são do curso do DataCamp [Intrudução ao Tidyverse](https://campus.datacamp.com/courses/introduction-to-the-tidyverse), ministrado todo em inglês pelo David Robinson.

Para dicas em inglês sobre o tidyverse, veja o pdf abaixo. Os slides em inglês das aulas desse primeiro capítulo estão a seguir.
![dicas do tidyverse](https://datacamp-community-prod.s3.amazonaws.com/e63a8f6b-2aa3-4006-89e0-badc294b179c)

<object data="https://datacamp-community-prod.s3.amazonaws.com/e63a8f6b-2aa3-4006-89e0-badc294b179c" type="application/pdf" width="100%" height="400">
    <embed src="https://datacamp-community-prod.s3.amazonaws.com/e63a8f6b-2aa3-4006-89e0-badc294b179c">
        <p>This browser does not support PDFs. Please download the PDF to view it: <a href="https://datacamp-community-prod.s3.amazonaws.com/e63a8f6b-2aa3-4006-89e0-badc294b179c">Download PDF</a>.</p>
    </embed>
</object>

![Slides do primeiro capítulo em inglês](pdfs/chapter1-DataCampIntroduction-to-the-Tidyverse-The-gapminder-dataset.pdf){width=100% height=400}

## Data Wrangling
Utilizaremos os dados da biblioteca do [Gapminder](https://www.gapminder.org/), um ótimo site com dados socio-econômicos mundias. Também estaremos utilizando a biblioteca [dplyr](https://dplyr.tidyverse.org/), que serve como uma fonte gramática para os textos progamáticos que estaremos escrevendo. dplyr fornecerar verbos que facilitarão a nossa escrita dos algorítmos a seguir. 
```{r}
library(gapminder)
library(dplyr)
```
Ao rodar o código acima, nota-se que um aviso aparece dizendo que [certas funções foram mascaradas](https://stackoverflow.com/questions/39137110/what-does-the-following-object-is-masked-from-packagexxx-mean). Isso significa ao chamar os pacotes, existiam funções com o mesmo nome do que as que já foram carregdas, e que essas mais recentes serão utilizadas pois aparecem primeiro na ordem de chamada do R. Pode er mais sobre isso em português no [Scoping Rules - Symbol Binding](https://falnesio.github.io/Time-Tito/coursera/r-programming/fal/semana-2.html)
```{r}
# Para verificar a ordem atual basta rodar a linha abaixo:
search()
```
Abaixo uma visão exploratória dos dados que utilizaremos
```{r}
gapminder
str(gapminder)
```


### O verbo filtro: filter()

Utilizamos `filter()` quando queremos obter um subconjunto dos dados.
Quando formos utilizar um verbo, sempre utilizamos um cano (**pipe**) `%>%`.
Esse cano irá puxar o dado que vem antes e passar ele pelo verbo filtro.
```{r}
# Abaixo estamos filtrando pelo ano 2007
gapminder %>%
  filter(year == 2007)
# e agora por país
gapminder %>%
  filter(country == "Brazil")
# podemos fazer isso para múltiplos prâmetros
gapminder %>%
  filter(year == 2007, country == "Brazil")
```

### O verbo arranjar: arrange()

O verbo `arrange` reordena as observações de uma base de dados de forma ascendente ou descendente (default) com base em um dos seus parâmetros. 
```{r}
# Ascendente
gapminder %>%
  arrange(gdpPercap)
# Descendente
gapminder %>%
  arrange(desc(gdpPercap))
```

### Utilizando mais de um verbo

Aqui utilizaremos uma série de canalização, passando os dados pelo primeiro filtramos os dados que queremos, depois, passando pelo segundo encanamento, ordenamos os dados de acordo com o parâmetro de nossa escolha.
```{r}
gapminder %>%
  filter(year == 2007) %>%
  arrange(desc(gdpPercap))
```

### O verbo mutar: mutate()

Supomos que queiro alterar ou adicionar uma variável/parâmetro do banco de dados, para isso utilizaremos `mutate()`.
```{r}
# População será alterado para população / 1000000
gapminder %>%
  mutate(pop = pop / 1000000)
# Abaixo criamos a variável gdp (a nova variável não pode conter espaços no nome)
gapminder %>%
  mutate(gdp = gdpPercap * pop)
```

## Data Visualization

Utilizaremos o pacote `ggplot2` em conjunto com `dplyr` para gerar gráficos.
Para gerar as visualizações das informações que achamos interessante, primeiro precisamos de aplicar a nossa manipulação dos dados a uma variável, como a seguir:
```{r}
gapminder_2007 <- gapminder %>%
  filter(year == 2007)

gapminder_2007
```
Para criar as nossas visualizações com `ggplot2`, precisamos primeiro puxar a sua biblioteca:
```{r}
library(ggplot2)
```
Agora criaremos um gráfico de dispersão com os dados de expectativa de vida e PIB per *capita*, para fazer uma analise exploratória de correlação entre esses dois parâmetros.
```{r}
# O primeiro argumento é a base de dados, seguido pelo aes que é a base estética do gráfico, onde alocamos quais dados queremos e em quais dimensões serão aplicados. 
# Depois do "+" chamamos o tipo de gráfico que queremos, isso adiciona uma camada ao gráfico com determinada visualização. O "geom" significa que estamos adicionando uma camada geométrica ao gráfico, o ponto indica que cada observação é representado por um ponto.
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +  
  geom_point()
```

Algúns dados não são bem representados em gráficos em sua forma bruta, tendo muitas das observações, por exemplo, encolhidas na esquerda como no gráfico acima e no exemplo abaixo. No gráfico abaixo, é difícil de tirar conclusões sobre a relação entre PIB per *capita* e população.
```{r}
ggplot(gapminder_2007, aes(x = pop, y = gdpPercap)) +  
  geom_point()
```
Isso ocorre devido as diferenças nas ordens de grandezas dos dados. Isso pode ser corrigido com uma escala logarítmica onde as distâncias entre as observações se mantem constante para uma mesma variação da proporção entre eles. Isso pode ser feito facilmente colocando mais uma camada ao gráfico.
```{r}
# Para o primeiro gráfico temos
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +  
  geom_point() +
  scale_x_log10()
# Para o segundo temos
ggplot(gapminder_2007, aes(x = pop, y = lifeExp)) +  
  geom_point() +
  scale_x_log10() +
  scale_y_log10()
```
Observamos claramente então que não existe correlação entre a população e expectativa de vida, porém existe entre isso e Pib per *capita*. 

### Cor e Tamanho

Um bom jeito de explicitar categorias em gráficos é aplicando cores. Faremos isso para demarcar os continente relativos a cada observação nos dados abaixo. A legenda é criada automaticamente.
```{r}
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent)) +
  geom_point() +
  scale_x_log10()
```
Podemos melhorar a visualização colocando mais informações de forma sutil. Faremos isso adicionando informação sobre o tamanho da população ao gráfico sendo representado pelo tamanho do ponto a seguir. Colocamos o argumento para o tamanho numa linha separada para deixar o código mais fácil de ser lido por um humano.
```{r}
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, 
                           size = pop)) +
  geom_point() +
  scale_x_log10()
```

Vemos que apesar de não existir correlação entre as duas variáveis o gráfico nos permite encontrar que países africanos se agrupam mais numa região de baixa expectativa de vida e países europeus em uma região com maior expectativa de vida. Isso seria uma informação muito útil , junto à falta de correlação, se não tivessemos obtido tais informações anteriormente.
```{r}
ggplot(gapminder_2007, aes(x = pop, y = lifeExp, color = continent)) +
    geom_point() +
    scale_x_log10()
```

### Faceting, facetando

É possível dividir um gráfico em várias faces de acordo com um parâmetro, gerando subgráficos de um gráfico originário. Fazemos isso adicionando mais uma camada ao gráfico. Geralmente em R, 
```{r}
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, 
                           size = pop)) +
  geom_point() +
  scale_x_log10() +
  facet_wrap(~ continent)
```
Podemos expandir a nossa análise e verificar as mesmas informações para todos os anos.
```{r}
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, 
                           size = pop)) +
  geom_point() +
  scale_x_log10() +
  facet_wrap(~ year)
```
Podemos observar uma leve tendência para cima e para a direita, representando um Pib per *capita* e uma expectativa de vida maior ao longo do tempo numa escala mundial.

### O verbo de resumir: summarize() ou summarise()

Tal verbo transforma um parâmetro em um ponto de dado, resumindo as informações de todos os dados das observações abaixo, por exemplo, numa média.
```{r}
gapminder %>%
  summarize(mediaLifeExp = mean(lifeExp))
```
Podemos fazer uma análise para um ano em particular, que deve fazer mais sentido que olhar a média de todos os países e todos os anos. Podemos resumir mais de uma observação de uma só vez também.
```{r}
gapminder %>%
  filter(year == 2007) %>%
  summarize(mediaLifeExp = mean(lifeExp), totalPop = sum(as.numeric(pop)))
```

### O verbo de agrupar: group_by()

E se quisermos ver o resumo de vários grupos de dados como, por exemplo, para cada ano? Podemos utilizar o verbo `grou_by()` para isso. É o mesmo que filter, porém ao invés de puxar os dados e criar um agrupamento, esse cria vários baseados num parâmetro.
```{r}
gapminder %>%
  group_by(year) %>%
  summarize(mediaLifeExp = mean(lifeExp), totalpop = sum(as.numeric(pop)))
```
Podemos utilizar ambos `filtro` e `group_by` para selecionar uma característica em particular, dividir os dados com essa característica em grupos e resumir cada um. 
```{r}
por_continente_2007<- gapminder %>%
  filter(year == 2007) %>%
  group_by(continent) %>%
  summarize(mediaLifeExp = mean(lifeExp), totalPop = sum(as.numeric(pop)))
por_continente_2007
```
Tendo essa tabela, talvez esteja curioso sobre como fazer uma para cada ano? Podemos fazer isso escolhendo agrupar por ano e continente. Ou seja, primeiro as observações são agrupadas pelo primeiro parâmetro e dentro desse agrupamento, são agrupados pelo segundo. 
```{r}
gapminder %>%
  group_by(year, continent) %>%
  summarize(mediaLifeExp = mean(lifeExp), totalpop = sum(as.numeric(pop)))
```

### Visualizando dados resumidos

Os três passos ggplot:
 1. Os dados
 1. A estética (x,y)
 1. O tipo de gráfico

```{r}
por_ano <- gapminder %>%
  group_by(year) %>%
  summarize(mediaLifeExp = mean(lifeExp), totalPop = sum(as.numeric(pop)))
ggplot(por_ano, aes(x = year, y = totalPop)) +
  geom_point()
```
O gráfico não representa muito bem a realiade dado não mostrar direito onde iniciou. Para revolver isso podemos adicionaro espaço abaixo dos dados. Boas práticas dizem que as informações num gráfico devem preencher 1/3 do espaço total.
```{r}
ggplot(por_ano, aes(x = year, y = totalPop)) +
  geom_point()+
  expand_limits(y = 0)
```
Podemos ver as tendências de todos os continentes também.
```{r}
por_ano_continente <- gapminder %>%
  group_by(year, continent) %>%
  summarize(mediaLifeExp = mean(lifeExp), totalPop = sum(as.numeric(pop)))
ggplot(por_ano_continente, aes(x = year, y = totalPop, color = continent)) +
  geom_point() +
  expand_limits(y = 0)
```

## Tipos de visualização

Agora vamos expandir nos tipos de visualização que temos, que são bons para comparar estatísticas entre categorias. Faremos regressões, gráficos de barra, histogramas, etc.

### Gráfico de linhas
Para fazer um **gráfico de linha** é só mudar `geom_point` para `geom_line`.
```{r}
por_ano_continente <- gapminder %>%
  group_by(year, continent) %>%
  summarize(mediaLifeExp = mean(lifeExp), totalPop = sum(as.numeric(pop)))
ggplot(por_ano_continente, aes(x = year, y = totalPop, color = continent)) +
  geom_line()
```

### Gráfico de Barras
Vamos ver como criar um gráfico de barras simples
```{r}
# por_ano
ggplot(por_continente_2007, aes(x = continent, y = totalPop, color = continent)) +
  geom_col()
```
Que tal uma visualização que mostra a variação ao longo de vários anos e não apenas 2007
```{r}
por_ano_continente <- gapminder %>%
  group_by(year, continent) %>%
  summarize(mediaLifeExp = mean(lifeExp), totalPop = sum(as.numeric(pop)))
ggplot(por_ano_continente, aes(x = year, y = totalPop, color = continent)) +
  geom_col()
```

### Histograma

Para os histograms, podemos deixar as bandas serem escolhidas pelo R, ou escolher o tamanho manualmente dentro do `geom_histogram()` com, por exemplo, `geom_histogram(binwidth = 5)`. Nesse caso o tamanho das bandas são a quantidade de anos dentro de cada barra.
```{r}
ggplot(por_ano_continente, aes(x = mediaLifeExp)) +
  geom_histogram(binwidth = 5)
```
Podemos também ter um olhar mais detalhado ao extratificado por continente.
```{r}
ggplot(por_ano_continente, aes(x = mediaLifeExp, color = continent)) +
  geom_histogram()
```
Quando os dados estão muito concentrados na esquerda, como abaixo, podemos utilizar uma escala logarítmica.
```{r}
gapminder_1952 <- gapminder %>%
  filter(year == 1952)
ggplot(gapminder_1952, aes(x = pop)) +
  geom_histogram() 
```
Como podemos ver, isso resolve o problema
```{r}
gapminder_1952 <- gapminder %>%
  filter(year == 1952)
ggplot(gapminder_1952, aes(x = pop)) +
  geom_histogram() +
  scale_x_log10()
```

### Gráfico de vela

Mostra as distribuições: máximos, mínimos, mediana, os pontos de outliers e o 25 percentile e 75 percentile (ou seja, metade da distribuição se localiza nessa caixa).
```{r}
ggplot(gapminder_2007, aes(x = continent, y = lifeExp)) +
  geom_boxplot()
```

### Colocando um título

Adiciona-se uma camada com `ggtitle("seu título")`
```{r}
ggplot(gapminder_2007, aes(x = continent, y = lifeExp)) +
  geom_boxplot() + 
  ggtitle("seu título")
```
